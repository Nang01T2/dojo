// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using net_core_mssql.Data;

namespace net_core_mssql.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210105155310_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("net_core_mssql.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Class")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Defense")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HitPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Intelligence")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Strength")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("net_core_mssql.Models.CharacterSkill", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CharacterId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("CharacterSkills");
                });

            modelBuilder.Entity("net_core_mssql.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Damage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Damage = 30,
                            Name = "Fireball"
                        },
                        new
                        {
                            Id = 2,
                            Damage = 20,
                            Name = "Frenzy"
                        },
                        new
                        {
                            Id = 3,
                            Damage = 50,
                            Name = "Blizzard"
                        });
                });

            modelBuilder.Entity("net_core_mssql.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Player");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = new byte[] { 82, 107, 154, 99, 233, 89, 155, 156, 185, 75, 39, 25, 109, 226, 157, 226, 81, 71, 99, 221, 247, 199, 87, 238, 12, 197, 32, 61, 173, 128, 199, 250, 195, 213, 5, 38, 16, 17, 184, 204, 87, 53, 41, 248, 126, 193, 193, 138, 249, 82, 184, 11, 98, 61, 22, 241, 75, 49, 170, 127, 185, 109, 135, 225 },
                            PasswordSalt = new byte[] { 240, 8, 119, 103, 218, 31, 239, 179, 66, 4, 123, 93, 6, 24, 69, 86, 170, 31, 246, 250, 225, 42, 15, 13, 101, 238, 180, 231, 161, 43, 237, 72, 3, 212, 142, 140, 211, 87, 181, 21, 163, 230, 6, 107, 154, 174, 151, 78, 162, 87, 91, 174, 205, 126, 11, 201, 121, 124, 30, 111, 208, 7, 222, 45, 51, 66, 19, 170, 111, 11, 93, 218, 204, 232, 85, 232, 218, 92, 188, 136, 152, 53, 255, 73, 200, 53, 126, 55, 189, 237, 53, 64, 247, 124, 168, 97, 170, 220, 187, 87, 201, 198, 104, 119, 136, 182, 98, 187, 71, 208, 40, 197, 50, 31, 119, 136, 208, 200, 75, 77, 47, 106, 174, 144, 172, 65, 111, 241 },
                            Username = "User1"
                        },
                        new
                        {
                            Id = 2,
                            PasswordHash = new byte[] { 82, 107, 154, 99, 233, 89, 155, 156, 185, 75, 39, 25, 109, 226, 157, 226, 81, 71, 99, 221, 247, 199, 87, 238, 12, 197, 32, 61, 173, 128, 199, 250, 195, 213, 5, 38, 16, 17, 184, 204, 87, 53, 41, 248, 126, 193, 193, 138, 249, 82, 184, 11, 98, 61, 22, 241, 75, 49, 170, 127, 185, 109, 135, 225 },
                            PasswordSalt = new byte[] { 240, 8, 119, 103, 218, 31, 239, 179, 66, 4, 123, 93, 6, 24, 69, 86, 170, 31, 246, 250, 225, 42, 15, 13, 101, 238, 180, 231, 161, 43, 237, 72, 3, 212, 142, 140, 211, 87, 181, 21, 163, 230, 6, 107, 154, 174, 151, 78, 162, 87, 91, 174, 205, 126, 11, 201, 121, 124, 30, 111, 208, 7, 222, 45, 51, 66, 19, 170, 111, 11, 93, 218, 204, 232, 85, 232, 218, 92, 188, 136, 152, 53, 255, 73, 200, 53, 126, 55, 189, 237, 53, 64, 247, 124, 168, 97, 170, 220, 187, 87, 201, 198, 104, 119, 136, 182, 98, 187, 71, 208, 40, 197, 50, 31, 119, 136, 208, 200, 75, 77, 47, 106, 174, 144, 172, 65, 111, 241 },
                            Username = "User2"
                        });
                });

            modelBuilder.Entity("net_core_mssql.Models.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Damage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("net_core_mssql.Models.Character", b =>
                {
                    b.HasOne("net_core_mssql.Models.User", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("net_core_mssql.Models.CharacterSkill", b =>
                {
                    b.HasOne("net_core_mssql.Models.Character", "Character")
                        .WithMany("CharacterSkills")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("net_core_mssql.Models.Skill", "Skill")
                        .WithMany("CharacterSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("net_core_mssql.Models.Weapon", b =>
                {
                    b.HasOne("net_core_mssql.Models.Character", "Character")
                        .WithOne("Weapon")
                        .HasForeignKey("net_core_mssql.Models.Weapon", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("net_core_mssql.Models.Character", b =>
                {
                    b.Navigation("CharacterSkills");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("net_core_mssql.Models.Skill", b =>
                {
                    b.Navigation("CharacterSkills");
                });

            modelBuilder.Entity("net_core_mssql.Models.User", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
